/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */

import React, { Component } from 'react'
import { Platform, StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native'
import OpenCV from './NativeModules/OpenCV'

const instructions = Platform.select({
  ios: 'Press Cmd+R to reload,\n' + 'Cmd+D or shake for dev menu',
  android: 'Double tap R on your keyboard to reload,\n' + 'Shake or press menu button for dev menu',
})

type Props = {}
export default class App extends Component<Props> {
  state = {
    processedImage64: null,
  }

  changeImageContrast(imageAsBase64) {
    console.log('TCL: App -> changeImageContrast -> imageAsBase64 (incoming)', imageAsBase64)

    return new Promise((resolve, reject) => {
      OpenCV.changeImageContrast(imageAsBase64, 0.6, (error, dataArray) => {
        console.log('TCL: App -> changeImageContrast JS -> dataArray (recived): ', dataArray)
        resolve(dataArray[0])
      })
    })
  }

  testMethod = () => {
    this.changeImageContrast(
      ``
    ).then(data => {
      console.log('TCL: App -> testMethod -> data', data)
      if (data) {
        this.setState({ processedImage64: data })
      }
    })
  }

  render() {
    const { processedImage64 } = this.state

    if (processedImage64) {
      return (
        <View style={styles.container}>
          <Image
            style={{ height: 300, width: 300, backgroundColor: 'red' }}
            source={{ uri: `data:image/png;base64,${processedImage64}` }}
            resizeMode="contain"
          />
        </View>
      )
    }

    return (
      <View style={styles.container}>
        <TouchableOpacity onPress={this.testMethod}>
          <Text style={styles.welcome}>Welcome to React Native!</Text>
        </TouchableOpacity>
        <Text style={styles.instructions}>To get started, edit App.js</Text>
        <Text style={styles.instructions}>{instructions}</Text>
      </View>
    )
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
})
